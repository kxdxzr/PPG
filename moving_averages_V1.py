def moving_averages(pulse_rate, samples_per_second):

    i = 0

    #Empty list to store moving averages
    moving_averages = []

    #Find the number of samples in the last 15 seconds and round to 0 decimal places
    number_samples = samples_per_second*15
    number_samples = round(number_samples)
    
    #Create a new list containing only the data from the last 15 seconds
    moving_pulse_rate = pulse_rate[-number_samples:-1]
    
    #Create a loop to go through the array and calculate the moving average of each with each window size being the number of samples in a second
    while i < len(moving_pulse_rate) - samples_per_second + 1:
        window = moving_pulse_rate[i : i + samples_per_second]
        window_average = sum(window)/samples_per_second
        moving_averages.append(window_average)
        i = i + 1

    return moving_averages

#Example variables and return moving averages array
example_pulse_rate
samples_20_msec = 50
moving_averages_array = moving_averages(example_pulse_rate, samples_20_msec)

#Print data and arrays
print("Example pulse rate array: ")
print(example_pulse_rate)
print()
print("Samples per second: " + str(samples_20_msec))
print()
print("Moving averages array: " )
print(moving_averages_array)


